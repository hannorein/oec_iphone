#!/usr/bin/python
from xml.etree import ElementTree
import os, glob, string, csv, datetime, random,md5
import gzip

# Human readable XML output
def indent(elem, level=0):
    i = "\n" + level*"\t"
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "\t"
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for elem in elem:
            indent(elem, level+1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i

# Hide empty elements
def traverse(node):  #remove empty elements
	children = node.getchildren()
	deleted = 0
	for c in children:
		text = c.text
		if text == None and len(c.attrib)==0:
			#print "#############"
			#print c #.text
			node.remove(c)
			deleted = 1
			break
		traverse(c)
	if deleted==1:
		traverse(node)

#########################################
####NEW SYSTEM DATABASE FORMAT###########
#########################################

def convertseparationtosemimajoraxis(planettree):
    binaries = planettree.findall(".//binary")
    planets  = planettree.findall(".//planet")
    for obj in binaries+planets:
        semia = obj.findall("./semimajoraxis")
        if not semia or len(semia)==0:
            sep = obj.findall("./separation[@unit='AU']")
            if sep and len(sep) ==1:
                ElementTree.SubElement(obj,"semimajoraxis").text = sep[0].text


def databasesystems(name,description,inputdirectories):
    numpl = 0
    systems = 0
    root = ElementTree.Element("systems")
    ## import data
    for inputdirectory in inputdirectories:
        for filename in glob.glob(inputdirectory+"/*.xml"):
            planet = open(filename, 'rt')
            planettree = ElementTree.parse(planet).getroot()
            traverse(planettree)
            convertseparationtosemimajoraxis(planettree)

            root.append(planettree)
            numpl += len(planettree.findall(".//planet"))
            systems +=1
		
	# wrap it in an ElementTree instance, and save as XML
	root.attrib["name"]=name
	root.attrib["planets"]="%d"%numpl
	indent(root)
	ElementTree.ElementTree(root).write("../data_iphone_11/"+name+".xml")
	f = open("../data_iphone_11/"+name+".xml", 'rt') 
	content = f.read()
	f.close()
	f = gzip.open("../data_iphone_11/"+name+'.xml.gz', 'wb')
	f.write(content)
	f.close()
	root = ElementTree.Element("database")
	ElementTree.SubElement(root,"name").text		= name
	ElementTree.SubElement(root,"description").text		= description
	ElementTree.SubElement(root,"num").text			= str(numpl)
	ElementTree.SubElement(root,"systems").text		= str(systems)
	ElementTree.SubElement(root,"date").text		= str(datetime.date.today())
	ElementTree.SubElement(root,"size").text		= str(os.path.getsize("../data_iphone_11/"+name+".xml"))
	ElementTree.SubElement(root,"sizecompressed").text	= str(os.path.getsize("../data_iphone_11/"+name+".xml.gz"))
	ElementTree.SubElement(root,"hash").text 		= md5.md5(content).hexdigest()
	return root

databases = []
databases.append(databasesystems("systems",		"Confirmed, controversial and retracted exoplanets", 	["../open_exoplanet_catalogue/systems"]))
databases.append(databasesystems("systemskepler",	"Kepler Objects of Interest (unconfirmed)",		["../open_exoplanet_catalogue/systems_kepler"]))

root = ElementTree.Element("databases")
for db in databases:
	root.append(db)
indent(root)
ElementTree.ElementTree(root).write("../data_iphone_11/databases.xml")

